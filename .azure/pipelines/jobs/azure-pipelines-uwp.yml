# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - master
    - hotfix/*
    - release/*
    - feature/*
    - development

schedules:
- cron: "0 3 * * *"
  displayName: Nightly Build
  branches:
    include:
    - feature/*
    - development
    exclude:
    - master
    - hotfix/*
    - release/*

pool:
  vmImage: windows-latest

variables:
- group: 'Certificate Keys'
- name: packages
  value: './Nuget.Config'
- name: solution
  value: '**/Xamarin.sln'
- name: project
  value: '**/CRM.UWP.csproj'
- name: appxPackageDir
  value: '$(build.artifactStagingDirectory)\AppxPackages\\'

jobs:
- job: CI_Debug
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'), not(in(variables['Build.SourceBranchName'], 'master', 'release/*', 'hotfix/*')))
  steps:
  - task: PowerShell@2
    inputs:
      filePath: 'download-uwp-preview-sdk.ps1'
      failOnStderr: true
  - task: DownloadSecureFile@1
    displayName: 'Download Certificate'
    name: signingCert
    inputs:
      secureFile: 'TempCertificate.pfx'
  - task: NuGetToolInstaller@1
    displayName: Install NuGet
    inputs:
      versionSpec: 
      checkLatest: true
  - task: NuGetCommand@2
    displayName: Restore
    inputs:
      command: 'restore'
      restoreSolution: '$(solution)'
      feedsToUse: 'config'
      nugetConfigPath: '$(packages)'
  - task: VSBuild@1
    displayName: Build
    inputs:
      clean: true
      solution: '$(project)'
      maximumCpuCount: true
      msbuildArchitecture: 'x64'
      configuration: 'Debug'
      msbuildArgs: '/p:AppxBundlePlatforms="x86|x64|ARM"
                    /p:AppxPackageDir="$(appxPackageDir)"
                    /p:AppxBundle=Always
                    /p:UapAppxPackageBuildMode=StoreUpload
                    /p:AppxPackageSigningEnabled=true
                    /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)"
                    /p:PackageCertificatePassword=$(UWPCertificateKey)'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      
- job: CI_Release
  condition: and(always(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'), not(in(variables['Build.SourceBranchName'], 'development', 'feature/*')))
  steps:
  - task: PowerShell@2
    inputs:
      filePath: 'download-uwp-preview-sdk.ps1'
      failOnStderr: true
  - task: DownloadSecureFile@1
    displayName: 'Download Certificate'
    name: signingCert
    inputs:
      secureFile: 'TempCertificate.pfx'
  - task: NuGetToolInstaller@1
    displayName: Install NuGet
    inputs:
      versionSpec: 
      checkLatest: true
  - task: NuGetCommand@2
    displayName: Restore
    inputs:
      command: 'restore'
      restoreSolution: '$(solution)'
      feedsToUse: 'config'
      nugetConfigPath: '$(packages)'
  - task: VSBuild@1
    displayName: Build
    inputs:
      clean: true
      solution: '$(project)'
      maximumCpuCount: true
      msbuildArchitecture: 'x64'
      configuration: 'Release'
      msbuildArgs: '/p:AppxBundlePlatforms="x86|x64|ARM"
                    /p:AppxPackageDir="$(appxPackageDir)"
                    /p:AppxBundle=Always
                    /p:UapAppxPackageBuildMode=StoreUpload
                    /p:AppxPackageSigningEnabled=true
                    /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)"
                    /p:PackageCertificatePassword=$(UWPCertificateKey)'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'

- job: Scheduled_Release
  condition: and(always(), eq(variables['Build.Reason'], 'Schedule'))
  steps:
  - task: PowerShell@2
    inputs:
      filePath: 'download-uwp-preview-sdk.ps1'
      failOnStderr: true
  - task: DownloadSecureFile@1
    displayName: 'Download Certificate'
    name: signingCert
    inputs:
      secureFile: 'TempCertificate.pfx'
  - task: NuGetToolInstaller@1
    displayName: Install NuGet
    inputs:
      versionSpec: 
      checkLatest: true
  - task: NuGetCommand@2
    displayName: Restore
    inputs:
      command: 'restore'
      restoreSolution: '$(solution)'
      feedsToUse: 'config'
      nugetConfigPath: '$(packages)'
  - task: VSBuild@1
    displayName: Build
    inputs:
      clean: true
      solution: '$(project)'
      maximumCpuCount: true
      msbuildArchitecture: 'x64'
      configuration: 'Release'
      msbuildArgs: '/p:AppxBundlePlatforms="x86|x64|ARM"
                    /p:AppxPackageDir="$(appxPackageDir)"
                    /p:AppxBundle=Always
                    /p:UapAppxPackageBuildMode=StoreUpload
                    /p:AppxPackageSigningEnabled=true
                    /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)"
                    /p:PackageCertificatePassword=$(UWPCertificateKey)'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'