# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  batch: true
  branches:
    include:
    - master
    - hotfix/*
    - release/*
    - feature/*
    - refs/tags/*
    - development

schedules:
- cron: "0 3 * * *"
  displayName: Nightly Build
  branches:
    include:
    - feature/*
    - development
    exclude:
    - master
    - hotfix/*
    - release/*
    - refs/tags/*

pool:
  vmImage: ubuntu-latest

variables:
  solution: '**/CRM.sln'
  packages: './NuGet.Config'
  project: '**/CRM.Server.csproj'

jobs:
- job: CI_Debug
  condition:
    and(succeeded(),
        not(startsWith(variables['Build.SourceBranch'], 'refs/tags/')),
        in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'),
        not(in(variables['Build.SourceBranchName'], 'master', 'release/*', 'hotfix/*')))
  strategy:
    maxParallel: 10
    matrix:
      Linux x64:
        runtime: linux-x64
  steps:
  - task: UseDotNet@2
    displayName: 'Download .NET Core 5.x SDK'
    inputs:
      packageType: 'sdk'
      version: '5.x'
      includePreviewVersions: true
      performMultiLevelLookup: true
  - task: DotNetCoreCLI@2
    displayName: 'Restore'
    inputs:
      command: 'restore'
      feedsToUse: 'config'
      projects: '$(solution)'
      publishPackageMetadata: true
      nugetConfigPath: '$(packages)'
  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      command: 'build'
      projects: '**/CRM.Test.csproj'
      arguments: '--no-restore --configuration debug --runtime $(runtime)'
  - task: DotNetCoreCLI@2
    displayName: 'Test'
    inputs:
      command: 'test'
      projects: '**/CRM.Test.csproj'
      publishTestResults: true
      arguments: '--configuration debug --runtime $(runtime)'
  - task: DotNetCoreCLI@2
    displayName: 'Publish'
    inputs:
      command: 'publish'
      projects: '$(project)'
      zipAfterPublish: false
      publishWebProjects: false
      arguments: '--no-restore --configuration debug --output $(build.artifactstagingdirectory)'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      
- job: CI_Release
  condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
  strategy:
    maxParallel: 10
    matrix:
      Linux x64:
        runtime: linux-x64
  steps:
  - task: UseDotNet@2
    displayName: 'Download .NET Core 5.x SDK'
    inputs:
      packageType: 'sdk'
      version: '5.x'
      includePreviewVersions: true
      performMultiLevelLookup: true
  - task: DotNetCoreCLI@2
    displayName: 'Restore'
    inputs:
      command: 'restore'
      feedsToUse: 'config'
      projects: '$(solution)'
      publishPackageMetadata: true
      nugetConfigPath: '$(packages)'
  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      command: 'build'
      projects: '$(project)'
      arguments: '--no-restore --configuration release --runtime $(runtime)'
  - task: DotNetCoreCLI@2
    displayName: 'Test'
    inputs:
      command: 'test'
      projects: '**/CRM.Test.csproj'
      publishTestResults: true
      arguments: '--configuration release --runtime $(runtime)'
  - task: DotNetCoreCLI@2
    displayName: 'Publish'
    inputs:
      command: 'publish'
      projects: '$(project)'
      zipAfterPublish: false
      publishWebProjects: false
      arguments: '--no-restore --configuration release --output $(build.artifactstagingdirectory)'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
  - task: GitHubRelease@1
    displayName: 'GitHub Pre-release'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/pre-release/v')  
    inputs:
      gitHubConnection: 'GitHub'
      repositoryName: '$(Build.Repository.Name)'
      action: 'create'
      isPreRelease: true
      tagSource: 'gitTag'
      target: '$(Build.SourceVersion)'
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'issueBased'
  - task: GitHubRelease@1
    displayName: 'GitHub Release'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/release/v')
    inputs:
      gitHubConnection: 'GitHub'
      repositoryName: '$(Build.Repository.Name)'
      action: 'create'
      tagSource: 'gitTag'
      target: '$(Build.SourceVersion)'
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'issueBased'

- job: Scheduled_Release
  condition: and(always(), eq(variables['Build.Reason'], 'Schedule'))
  strategy:
    maxParallel: 10
    matrix:
      Linux x64:
        runtime: linux-x64
  steps:
  - task: UseDotNet@2
    displayName: 'Download .NET Core 5.x SDK'
    inputs:
      packageType: 'sdk'
      version: '5.x'
      includePreviewVersions: true
      performMultiLevelLookup: true
  - task: DotNetCoreCLI@2
    displayName: 'Restore'
    inputs:
      command: 'restore'
      feedsToUse: 'config'
      projects: '$(solution)'
      publishPackageMetadata: true
      nugetConfigPath: '$(packages)'
  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      command: 'build'
      projects: '$(project)'
      arguments: '--no-restore --configuration release --runtime $(runtime)'
  - task: DotNetCoreCLI@2
    displayName: 'Test'
    inputs:
      command: 'test'
      projects: '**/CRM.Test.csproj'
      publishTestResults: true
      arguments: '--configuration release --runtime $(runtime)'
  - task: DotNetCoreCLI@2
    displayName: 'Publish'
    inputs:
      command: 'publish'
      projects: '$(project)'
      zipAfterPublish: false
      publishWebProjects: false
      arguments: '--no-restore --configuration release --output $(build.artifactstagingdirectory)'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'